[["Map",1,2,9,10,22,23],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.10","content-config-digest","535468cd92f37421","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://vibhavmisra.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark-dimmed\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"hello-world",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"legacyId":20,"deferredRender":21},{"title":14,"date":15,"description":16},"Hello, World","2025-09-18","Why I rebuilt my portfolio with Astro, Tailwind, and MDX.","Welcome to the new site! This post explains the stack choices and how I’ll showcase notebooks, visualizations, and projects.","src/content/blog/hello-world.mdx","894b7e72261745a4","hello-world.mdx",true,"projects",["Map",24,25,41,42,57,58],"exoplanet-habitability-explorer",{"id":24,"data":26,"body":37,"filePath":38,"digest":39,"legacyId":40,"deferredRender":21},{"title":27,"date":28,"summary":29,"tags":30,"repo":35,"demo":36},"Exoplanet Habitability Explorer","2025-09-30","Interactive exploration of 5,000+ exoplanets (NASA PSCompPars), explainable habitability score + RF classifier, presets, details drawer, and compare tray.",[31,32,33,34],"Streamlit","ML","NASA","Astrophysics","https://github.com/Vibhav-Misra/exoplanet-habitability-explorer","https://huggingface.co/spaces/VibzMiz/exoplanet-habitability-explorer","◉ An end-to-end data-science & ML project that explores, ranks, and visualizes thousands of confirmed exoplanets using data from the NASA Exoplanet Archive.\r\n\r\n◉ The project demonstrates data sourcing, feature engineering, interactive visualization, and ML classification in a single deployable web app.\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Features**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **Live NASA data pull** – fetches the latest PSCompPars catalog from the NASA Exoplanet Archive via its TAP API (`src/fetch_data.py`)\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **Explainable habitability score** – composite of physical parameters such as insolation, radius, distance, stellar temperature, etc.\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **Interactive web app (Streamlit)** --\r\n  - ⅰ) Filter by radius, insolation, discovery year, distance, etc.\r\n  - ⅱ) Weight presets (Conservative HZ / Optimistic HZ / Observation-friendly) plus sliders for custom scoring\r\n  - ⅲ) Click-to-inspect planet details with score-component breakdown\r\n  - ⅳ) Compare tray for side-by-side comparison of up to 3 planets\r\n  - ⅴ) Downloadable filtered table\r\n  \u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **ML classifier** – trains a Random-Forest model to predict *“optimistic habitable-zone candidate”* label from non-leaking astrophysical & engineered features  \r\n  (e.g. luminosity proxy, semi-major axis, estimated insolation)\r\n  - ⅰ) ROC-AUC / PR-AUC / F1 displayed in the app\r\n  - ⅱ) Optional toggle to show predicted probability & label in the UI\r\n  \u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **Clean architecture & reproducibility** – separate training script, model artifacts in `/models`, Streamlit app in `app.py`\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Tech Stack**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **Python:** `pandas`, `numpy`, `requests`, `pyarrow`\r\n- ∘ **Data science / ML:** `scikit-learn`, `joblib`\r\n- ∘ **Web app / viz:** `Streamlit`, `Plotly`, `streamlit-plotly-events`\r\n- ∘ **Data source:** NASA Exoplanet Archive TAP API\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Workflow**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n```bash\r\n# 1. Create environment & install deps\r\npython3 -m venv venv\r\nsource venv/bin/activate\r\npip install -r requirements.txt\r\n\r\n# 2. Pull latest data\r\npython src/fetch_data.py\r\n\r\n# 3. (optional) Train / update ML model\r\npython src/train_classifier.py\r\n\r\n# 4. Run interactive app locally\r\nstreamlit run app.py","src/content/projects/exoplanet-habitability-explorer.mdx","d42c998926cdb785","exoplanet-habitability-explorer.mdx","memory-manager-for-ai-chatbot",{"id":41,"data":43,"body":53,"filePath":54,"digest":55,"legacyId":56,"deferredRender":21},{"title":44,"date":45,"summary":46,"tags":47,"repo":52},"Memory Manager for AI Chatbot","2025-07-25","Designed memory‑based personalization (episodic + semantic) over MongoDB; improved continuity and engagement.",[48,49,50,51],"AI","CHatbot","MongoDB","Personalization","https://github.com/Vibhav-Misra/memory-manager-for-AI-chatbot","◉ A memory management service to allow an AI chatbot to remember conversations or user preferences.\r\n\r\n◉ This system automatically extracts, scores, and manages meaningful informationfrom conversations, creating a persistent memory system.\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Features**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ Automatic memory extraction from conversations.\r\n- ∘ AI-powered scoring and decision making.\r\n- ∘ Human oversight for uncertain memories.\r\n- ∘ MongoDB storage.\r\n- ∘ Real-time processing via REST API.\r\n- ∘ Admin interface for memory review.\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Architecture & Design**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **High-Level Architecture**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n![High-Level Architecture](/images/flowchart1.png)\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Workflow**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n```bash\r\n# 1. Clone/Download the Project\r\n# Navigate to your desired directory\r\ncd /path/to/your/project\r\n\r\n# 2. Install Python Dependencies\r\n# Install all required packages\r\npip install -r requirements.txt\r\n\r\n# 3. Start MongoDB\r\n# On macOS/Linux:\r\nmongod\r\n\r\n# On Windows:\r\n\"C:\\Program Files\\MongoDB\\Server\\8.0\\bin\\mongod.exe\"\r\n\r\n# 4. Create Environment Configuration\r\n# Run the startup script (creates .env file)\r\npython run_service.py\r\n\r\n# 5. Verify Installation\r\n# Test if the service can start\r\npython test_service.py\r\n\r\n# If successful, start the main service\r\npython run_service.py\r\n\r\n# 6. Start Admin Interface (Optional)\r\n# In a new terminal\r\nstreamlit run admin_ui.py","src/content/projects/memory-manager-for-AI-chatbot.mdx","beb919198d2970e3","memory-manager-for-AI-chatbot.mdx","ask-vibhav-resume-chatbot",{"id":57,"data":59,"body":69,"filePath":70,"digest":71,"legacyId":72,"deferredRender":21},{"title":60,"date":61,"summary":62,"tags":63,"repo":67,"demo":68},"Ask-Vibhav Resume Chatbot","2025-04-10","A GPT-powered chatbot trained on my resume! It answers questions about my background, technical skills, education, and projects, just like an interactive CV.",[64,48,65,66],"Resume","Chatbot","Groq API","https://github.com/Vibhav-Misra/AskVibhav","https://ask-vibhav-kj2hj96vj-vibhavs-projects-35932f5a.vercel.app/","◉ An interactive chatbot trained on my resume, deployed on Vercel, powered by Groq LLM API.\r\n\r\n◉ Users can ask questions about my background, skills, education, experience, or projects and get fast, on-topic answers directly from the resume.\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Overview**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ Uses a fixed knowledge base (My resume text) – no need for a vector DB.\r\n- ∘ Built as a Next.js / Vercel serverless API endpoint (/api/chat).\r\n- ∘ Talks to Groq’s OpenAI-compatible Chat Completions API with modern LLaMA 3 models.\r\n- ∘ Front-end is a minimal chat UI deployed along with the backend.\r\n- ∘ The project is designed to be cheap to run (no RAG or embeddings) and simple to maintain.\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Architecture & Design**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n- ∘ **High-Level Architecture**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n![High-Level Architecture](/images/flowchart2.png)\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n\r\n---\r\n\r\n\u003Cp style=\"margin-top:2rem;\">\u003C/p>\r\n◉ **Workflow**\r\n\u003Cp style=\"margin-top:1rem;\">\u003C/p>\r\n```bash\r\n# 1. Clone the Repo\r\ngit clone https://github.com/your-handle/ask-vibhav.git\r\ncd ask-vibhav\r\n\r\n# 2. Install Dependencies\r\nnpm install\r\n# or\r\nyarn install\r\n\r\n# 3. Set Environment Variables\r\n# Create a .env.local file (for local dev) and add:\r\nGROQ_API_KEY=your-groq-key-here\r\n\r\n# 4. Configure Node Runtime (important on Vercel)\r\n# Either in package.json:\r\n{ \"engines\": { \"node\": \"20.x\" } }\r\n\r\n# or in vercel.json:\r\n{ \"functions\": { \"api/*.js\": { \"runtime\": \"nodejs20.x\" } } }\r\n\r\n# 5. Run Locally\r\n# open http://localhost:3000\r\nnpm run dev\r\n\r\n# 6. Deploy to Vercel\r\nvercel deploy","src/content/projects/ask-vibhav-resume-chatbot.mdx","6d7e1ab35b1da1e1","ask-vibhav-resume-chatbot.mdx"]